•Utility score based on a heuristic:
For every move that is made by either player, we will be calculating a 
heuristic score for that move to determine how effective the move is and 
will improve the chances of winning for the player. In this approach, 
each heuristic is assigned a utility score that can either increase as a 
rewarding mechanism after an improving move or decrease as a punishment 
mechanism after a worsening move. The utility score is updated after each 
step of the algorithm, and the heuristic with the best score can be selected 
as the default strategy.

•Minmax with alpha-beta pruning:
Every move of a player will lead to a game state which will be advantageous 
to one and disadvantageous for another player. The first player will try to 
maximize the heuristic score, and is called the MAX player, while the second player, 
the MIN player, tries to minimize the heuristic score. The algorithm will recursively 
alternate between the MAX player and the MIN player until it reaches a terminal node. 
The game tree will be searched in a depth-first way meaning that the algorithm will 
search the deepest unvisited branch until a terminal node is reached. The value of the 
terminal node is then returned to the parent node. When all the branches of a node 
have been visited, the player can now choose the best branch from that node and return 
the value of that branch to the parent node again up to the root node.
